Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:39'!<= aMonom	(aMonom isKindOf: Monom) ifTrue: [		(self exp < aMonom exp) ifTrue: [ "if self exp is smaller return true"				^true.			] ifFalse: [				(self exp = aMonom exp) ifTrue: [ "if exp are equal determent by coef"					^(self coef <= aMonom coef).					]				ifFalse: [					^false.				].			].		] ifFalse: [			self error: 'Monom can only be comperd with other Monoms.'		].			! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:03'!coef	^coef.! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/6/2019 18:30'!coef: anInteger	(anInteger isKindOf: Integer) 	ifTrue: [	coef := anInteger.]	ifFalse: [self error: 'invalid input'.].! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:24'!copy	|aMonom|	aMonom := Monom new.	aMonom coef: coef.	aMonom exp: exp.	^aMonom.! !!Monom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 19:48'!copy: aMonom! !!Monom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 20:43'!derivative	| aMonom |	aMonom := Monom new.	(coef = 0 or: exp = 0) 	ifFalse: [ aMonom exp: (self exp - 1).			 aMonom coef: (self exp * self coef).].	^aMonom.! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:03'!exp	^exp.! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/6/2019 18:53'!exp: anInteger	((anInteger isKindOf: Integer) and: (anInteger >=0)) 	ifTrue: [	exp := anInteger.]	ifFalse: [self error: 'invalid input'.].! !!Monom methodsFor: 'instance-methods' stamp: 'Oranichu 11/6/2019 18:13'!initialize	exp := 0.	coef := 0.! !!Monom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 19:25'!printOn: aStream	|m|	m := (coef printString, 'x^', exp printString).	aStream nextPutAll: m.! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 22:11'!add: aPolyStream	(aPolyStream isKindOf: PolyStream) ifFalse: [self error: 'invalid input'.] ifTrue: [		block value: 'addPoly' value: aPolyStream.	].! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 22:10'!addCoef: coef withExp: exp 	| arr |	((coef isKindOf: Integer) and: (exp isKindOf: Integer ) and: (exp >= 0)) ifFalse: [self error: 'invalid input'.] ifTrue: [		arr := Array with: coef with: exp.		block value: 'addMonom' value: arr.	].! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 20:11'!block	^block! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 22:37'!eval: anInteger	(anInteger isKindOf: Integer) ifFalse: [self error: 'invalid input'.] ifTrue: [		|return_val|		return_val := block value: 'eval' value: anInteger.		^return_val.	].! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/15/2019 15:17'!initialize	|  m_list  | 	m_list := OrderedCollection new.	block := [:command :element | 		| list_element_push |		( command = 'eval') ifTrue:[			| sum temp_val multiply_by x |			sum := 0.			temp_val := 0.			x := element.			multiply_by := 1.									m_list do: [ :list_element | 				| switch cmd val|				cmd := list_element at: 1.				val := list_element at: 2.				switch := Dictionary new.								"val here is an array with coef and exp, add them to sum."				switch at: 'addMonom' put: [					| coef exp |					coef := val at: 1.					exp := val at: 2.					temp_val := x raisedToInteger: exp. 					temp_val := coef * temp_val * multiply_by.					sum := sum + temp_val.					].							"val here is a PolyStream, eval it's value when assigning x"				switch at: 'addPoly' put: [					temp_val := val eval: x.					temp_val := temp_val * multiply_by.					sum := sum + temp_val.				].							"val here is the int we need to mulitply the polynom from here on"				switch at: 'multiply' put: [					multiply_by := multiply_by * val.				].								"val here is the int we need to substitue with x"				switch at: 'substitue' put: [					x := x * val.				].							(switch at: cmd) value.			].			sum.			] ifFalse:[				list_element_push := Array with: command with: element.				m_list addFirst: list_element_push.		].	].! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 20:58'!multiplyBy: anInteger	(anInteger isKindOf: Integer) ifFalse: [self error: 'invalid input'.] ifTrue: [		block value: 'multiply' value: anInteger.	].! !!PolyStream methodsFor: 'instance-methods' stamp: 'Oranichu 11/11/2019 20:57'!substitue: anInteger	((anInteger isKindOf: Integer) and: anInteger ~= 0) ifFalse: [self error: 'invalid input'.] ifTrue: [		block value: 'substitue' value: anInteger.	].! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 21:14'!add: aPolynom	|result|	(aPolynom isKindOf: Polynom) ifFalse: [self error: 'invalid input'.] ifTrue: [		result := aPolynom copy.		monoms do: [:monom | result addMonom: (monom copy).].		^result.	].! !!Polynom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:26'!addMonom: aMonom	|exp_not_in_list |	(aMonom isKindOf: Monom) ifFalse: [self error: 'invalid input'.] ifTrue: [		exp_not_in_list := true.		monoms do: [:monom |			" sum all Monoms with same coef"			(monom exp = aMonom exp) ifTrue: [				monom coef: (monom coef + aMonom coef).				exp_not_in_list := false.			].			].		exp_not_in_list ifTrue: [monoms add: (aMonom copy).].	].	" filtering all monoms with coef 0"	monoms := monoms  select: [:monom | monom coef ~= 0].! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 20:35'!asDictionary	|aDictionary|	aDictionary := Dictionary new.	monoms do: [:monom | aDictionary add: monom exp -> monom coef.].	^aDictionary.! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 21:14'!copy	|aPolynom|	aPolynom := Polynom new.	monoms do: [:monom | aPolynom addMonom: (monom copy).].	^aPolynom.! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 20:43'!derivative	|aPolynom|	aPolynom := Polynom new.	monoms do: [:monom | aPolynom addMonom: (monom derivative).].	^aPolynom.	! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 21:02'!eval: anInteger	|val result|	(anInteger isKindOf: Integer) ifFalse: [self error: 'invalid input'.] ifTrue: [		result := 0.		monoms do: [:monom |			val := 1.			1 to: (monom exp) do: [:a | val := val * anInteger].			val := val * (monom coef).			result := result + val.		].		^result.	].! !!Polynom methodsFor: 'instance-methods' stamp: 'Oranichu 11/13/2019 17:19'!initialize	monoms := SortedCollection new.! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 20:26'!multiplyByMonom: aMonom	(aMonom isKindOf: Monom) ifFalse: [self error: 'invalid input'.] ifTrue: [		monoms do: [:monom |			monom coef: (monom coef) * (aMonom coef).			monom exp: (monom exp) + (aMonom exp).		].	].	monoms := monoms select: [:monom | monom coef ~= 0].! !!Polynom methodsFor: 'instance-methods' stamp: 'OB 11/10/2019 19:38'!printOn: aStream	aStream nextPutAll: monoms printString.! !